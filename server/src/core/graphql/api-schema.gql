# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Building {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String!
  location: String!
  floors: Float!
  letter: String!
  images: [String!]
  appartments: [Appartment!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Appartment {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  floor: Float
  letter: String
  observation: String
  users: [User!]
  building: Building
  buildingId: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  notes: String
  picture: String!

  """Ex: +5491165404122"""
  phone: String

  """Rol del Usuario"""
  rol: Roles!
  isActive: Boolean!

  """Id del ultimo user que llamo a updateUser"""
  modifierId: ID

  """appartmentId"""
  appartmentId: ID

  """appartment"""
  appartment: Appartment
  createdAt: DateTime!
  updatedAt: DateTime
}

"""Roles validos para el usuario (admin, owner, tenant). """
enum Roles {
  admin
  tenant
  owner
}

type Product {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  price: Float
  stock: Float
  images: [String!]
  name: String
  description: String
  brand: String
}

type ProductOnOrder {
  id: ID
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Float!
  price: Float!
  productId: ID!
  product: Product!
  orderId: ID
}

type Order {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  phone: Float!
  userId: ID!
  user: User!
  appartmentId: ID
  appartment: Appartment!
  observation: String
  cart: [ProductOnOrder!]!
}

type Query {
  users(roles: [Roles!]): [User!]!
  user(id: ID!): User!
  oAuthLogin(token: String!): User!
  appartments: [Appartment!]!
  appartment(id: String!): Appartment!
  buildings: [Building!]!
  building(id: String!): Building!
  products: [Product!]!
  product(id: String!): Product!
  Orders: [Order!]!
  Order(id: String!): Order!
  ProductOnOrders: [ProductOnOrder!]!
  ProductOnOrder(id: String!): ProductOnOrder!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  blockUser(id: ID!): User!
  createAppartment(input: CreateAppartmentDTO!): Appartment!
  updateAppartment(input: UpdateAppartmentDTO!): Appartment!
  deleteAppartment(id: String!): Appartment!
  createBuilding(input: CreateBuildingDTO!): Building!
  updateBuilding(input: UpdateBuildingDTO!): Building!
  deleteBuilding(id: String!): Building!
  createProduct(input: CreateProductDTO!): Product!
  updateProduct(input: UpdateProductDTO!): Product!
  deleteProduct(id: String!): Product!
  createOrder(input: CreateOrderDTO!): Order!
  updateOrder(input: UpdateOrderDTO!): Order!
  deleteOrder(id: String!): Order!
  createProductOnOrder(input: CreateProductOnOrderDTO!): ProductOnOrder!
  updateProductOnOrder(input: UpdateProductOnOrderDTO!): ProductOnOrder!
  deleteProductOnOrder(id: String!): ProductOnOrder!
}

input CreateUserInput {
  email: String!
  name: String!
  picture: String!
}

input UpdateUserInput {
  email: String
  name: String
  picture: String
  id: ID!
  modifierId: ID!
  appartmentId: ID!
  rol: Roles
  isActive: Boolean
  phone: String
}

input CreateAppartmentDTO {
  floor: Float
  letter: String
  observation: String!
  buildingId: ID!
}

input UpdateAppartmentDTO {
  floor: Float
  letter: String
  observation: String
  buildingId: ID
  id: ID!
}

input CreateBuildingDTO {
  address: String
  location: String
  floors: Float
  letter: String
  images: [String!]
}

input UpdateBuildingDTO {
  address: String
  location: String
  floors: Float
  letter: String
  images: [String!]
  id: ID!
}

input CreateProductDTO {
  price: Float!
  stock: Float!
  name: String!
  images: [String!]
  brand: String!
  description: String
}

input UpdateProductDTO {
  price: Float
  stock: Float
  name: String
  images: [String!]
  brand: String
  description: String
  id: ID!
}

input CreateOrderDTO {
  appartmentId: ID!
  phone: String!
  observation: String
}

input UpdateOrderDTO {
  appartmentId: ID
  phone: String
  observation: String
  id: ID!
}

input CreateProductOnOrderDTO {
  productId: ID!
  orderId: ID!
  price: Float!
  quantity: Float!
}

input UpdateProductOnOrderDTO {
  productId: ID
  orderId: ID
  price: Float
  quantity: Float
  id: ID!
}